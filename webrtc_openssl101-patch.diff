From d94de5008d5a09a6db75c65dfa32799b2fd8471a Mon Sep 17 00:00:00 2001
From: shuyj <shu.yajun@immomo.com>
Date: Wed, 4 Apr 2018 11:37:29 +0800
Subject: [PATCH] support ssl by openssl v1.0.1o version

---
 rtc_base/openssladapter.cc       | 33 ++++++++++++++++++---------------
 rtc_base/opensslidentity.cc      |  2 +-
 rtc_base/opensslstreamadapter.cc |  8 +++++---
 3 files changed, 24 insertions(+), 19 deletions(-)

diff --git a/rtc_base/openssladapter.cc b/rtc_base/openssladapter.cc
index a5ef0fe12..c2ccbb0e3 100644
--- a/rtc_base/openssladapter.cc
+++ b/rtc_base/openssladapter.cc
@@ -296,7 +296,7 @@ OpenSSLAdapter::OpenSSLAdapter(AsyncSocket* socket,
     ssl_ctx_ = factory_->ssl_ctx();
     RTC_DCHECK(ssl_ctx_);
     // Note: if using OpenSSL, requires version 1.1.0 or later.
-    SSL_CTX_up_ref(ssl_ctx_);
+    // SSL_CTX_up_ref(ssl_ctx_); // by openssl-v1.0.1o
   }
 }
 
@@ -387,7 +387,7 @@ int OpenSSLAdapter::BeginSSL() {
   }
 
   if (identity_ && !identity_->ConfigureIdentity(ssl_ctx_)) {
-    SSL_CTX_free(ssl_ctx_);
+    // SSL_CTX_free(ssl_ctx_); -- CleanupSSL();
     err = -1;
     goto ssl_error;
   }
@@ -438,20 +438,20 @@ int OpenSSLAdapter::BeginSSL() {
   }
 
   // Set a couple common TLS extensions; even though we don't use them yet.
-  SSL_enable_ocsp_stapling(ssl_);
-  SSL_enable_signed_cert_timestamps(ssl_);
+  // SSL_enable_ocsp_stapling(ssl_);
+  // SSL_enable_signed_cert_timestamps(ssl_);
 
   if (!alpn_protocols_.empty()) {
     std::string tls_alpn_string = TransformAlpnProtocols(alpn_protocols_);
     if (!tls_alpn_string.empty()) {
-      SSL_set_alpn_protos(
-          ssl_, reinterpret_cast<const unsigned char*>(tls_alpn_string.data()),
-          tls_alpn_string.size());
+      // SSL_set_alpn_protos(
+      //     ssl_, reinterpret_cast<const unsigned char*>(tls_alpn_string.data()),
+      //     tls_alpn_string.size());
     }
   }
 
   if (!elliptic_curves_.empty()) {
-    SSL_set1_curves_list(ssl_, rtc::join(elliptic_curves_, ':').c_str());
+    // SSL_set1_curves_list(ssl_, rtc::join(elliptic_curves_, ':').c_str());
   }
 
   // Now that the initial config is done, transfer ownership of |bio| to the
@@ -548,11 +548,13 @@ void OpenSSLAdapter::Cleanup() {
     SSL_free(ssl_);
     ssl_ = nullptr;
   }
-
-  if (ssl_ctx_) {
-    SSL_CTX_free(ssl_ctx_);
-    ssl_ctx_ = nullptr;
+  if (!factory_) {
+    if (ssl_ctx_) {
+      SSL_CTX_free(ssl_ctx_);
+      ssl_ctx_ = nullptr;
+    }
   }
+  
   identity_.reset();
 
   // Clear the DTLS timer
@@ -912,7 +914,7 @@ bool OpenSSLAdapter::VerifyServerName(SSL* ssl, const char* host,
   GENERAL_NAMES* names = reinterpret_cast<GENERAL_NAMES*>(
       X509_get_ext_d2i(certificate, NID_subject_alt_name, nullptr, nullptr));
   if (names) {
-    for (size_t i = 0; i < sk_GENERAL_NAME_num(names); i++) {
+    for (int i = 0; i < sk_GENERAL_NAME_num(names); i++) {
       const GENERAL_NAME* name = sk_GENERAL_NAME_value(names, i);
       if (name->type != GEN_DNS)
         continue;
@@ -1077,12 +1079,13 @@ SSL_CTX* OpenSSLAdapter::CreateContext(SSLMode mode, bool enable_cache) {
   // Use (D)TLS 1.2.
   // Note: BoringSSL supports a range of versions by setting max/min version
   // (Default V1.0 to V1.2). However (D)TLSv1_2_client_method functions used
-  // below in OpenSSL only support V1.2.
+  // below in OpenSSL only support V1.2. 
+  // openssl v1.0.1o by ijk-ffmpeg
   SSL_CTX* ctx = nullptr;
 #ifdef OPENSSL_IS_BORINGSSL
   ctx = SSL_CTX_new(mode == SSL_MODE_DTLS ? DTLS_method() : TLS_method());
 #else
-  ctx = SSL_CTX_new(mode == SSL_MODE_DTLS ? DTLSv1_2_client_method()
+  ctx = SSL_CTX_new(mode == SSL_MODE_DTLS ? DTLSv1_client_method()
                                           : TLSv1_2_client_method());
 #endif  // OPENSSL_IS_BORINGSSL
   if (ctx == nullptr) {
diff --git a/rtc_base/opensslidentity.cc b/rtc_base/opensslidentity.cc
index 8eb1c42d2..69c4631a7 100644
--- a/rtc_base/opensslidentity.cc
+++ b/rtc_base/opensslidentity.cc
@@ -295,7 +295,7 @@ OpenSSLCertificate* OpenSSLCertificate::Generate(
   PrintCert(x509);
 #endif
   OpenSSLCertificate* ret = new OpenSSLCertificate(x509);
-  X509_free(x509);
+//  X509_free(x509);
   return ret;
 }
 
diff --git a/rtc_base/opensslstreamadapter.cc b/rtc_base/opensslstreamadapter.cc
index c1ce2c6de..9b3fc32a1 100644
--- a/rtc_base/opensslstreamadapter.cc
+++ b/rtc_base/opensslstreamadapter.cc
@@ -17,8 +17,8 @@
 #include <openssl/tls1.h>
 #include <openssl/x509v3.h>
 #ifndef OPENSSL_IS_BORINGSSL
-#include <openssl/dtls1.h>
 #include <openssl/ssl.h>
+#include <openssl/dtls1.h>
 #endif
 
 #include <memory>
@@ -382,8 +382,10 @@ int OpenSSLStreamAdapter::GetSslVersion() const {
   if (ssl_mode_ == SSL_MODE_DTLS) {
     if (ssl_version == DTLS1_VERSION)
       return SSL_PROTOCOL_DTLS_10;
+#if DTLS_MAX_VERSION != DTLS1_VERSION
     else if (ssl_version == DTLS1_2_VERSION)
       return SSL_PROTOCOL_DTLS_12;
+#endif
   } else {
     if (ssl_version == TLS1_VERSION)
       return SSL_PROTOCOL_TLS_10;
@@ -1112,9 +1114,9 @@ int OpenSSLStreamAdapter::SSLVerifyCallback(X509_STORE_CTX* store, void* arg) {
       reinterpret_cast<OpenSSLStreamAdapter*>(SSL_get_app_data(ssl));
 
   // Record the peer's certificate.
-  X509* cert = SSL_get_peer_certificate(ssl);
+  X509* cert = store->cert;//SSL_get_peer_certificate(ssl);
   stream->peer_certificate_.reset(new OpenSSLCertificate(cert));
-  X509_free(cert);
+  // X509_free(cert);
 
   // If the peer certificate digest isn't known yet, we'll wait to verify
   // until it's known, and for now just return a success status.
-- 
2.14.3 (Apple Git-98)

